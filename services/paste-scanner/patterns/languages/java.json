[
  {
    "id": "java-sql-injection",
    "type": "sql-injection",
    "severity": "critical",
    "category": "injection",
    "pattern": ".*Statement.*executeQuery\\(.*\\+.*\\)",
    "flags": "i",
    "message": "Potential SQL injection vulnerability: Direct string concatenation in SQL query",
    "recommendation": "Use PreparedStatement with parameterized queries instead of string concatenation",
    "cwe": "CWE-89",
    "owasp": "A03:2021 – Injection",
    "confidence": 0.9
  },
  {
    "id": "java-sql-injection-concat",
    "type": "sql-injection", 
    "severity": "critical",
    "category": "injection",
    "pattern": ".*SELECT.*\\+.*",
    "flags": "i",
    "message": "SQL injection vulnerability: String concatenation in SQL query",
    "recommendation": "Use PreparedStatement with parameter binding",
    "cwe": "CWE-89",
    "owasp": "A03:2021 – Injection",
    "confidence": 0.8
  },
  {
    "id": "java-command-injection",
    "type": "command-injection",
    "severity": "critical", 
    "category": "injection",
    "pattern": "Runtime\\.getRuntime\\(\\)\\.exec\\(.*\\+.*\\)",
    "flags": "i",
    "message": "Command injection vulnerability: Unsanitized user input in Runtime.exec()",
    "recommendation": "Validate and sanitize all user input before passing to system commands",
    "cwe": "CWE-78",
    "owasp": "A03:2021 – Injection",
    "confidence": 0.9
  },
  {
    "id": "java-process-builder-injection",
    "type": "command-injection",
    "severity": "critical",
    "category": "injection", 
    "pattern": "ProcessBuilder\\(.*\\+.*\\)",
    "flags": "i",
    "message": "Command injection vulnerability: Unsanitized input in ProcessBuilder",
    "recommendation": "Use ProcessBuilder with fixed arguments or proper input validation",
    "cwe": "CWE-78",
    "owasp": "A03:2021 – Injection",
    "confidence": 0.8
  },
  {
    "id": "java-deserialization",
    "type": "insecure-deserialization",
    "severity": "high",
    "category": "deserialization",
    "pattern": "ObjectInputStream.*readObject\\(\\)",
    "flags": "i", 
    "message": "Insecure deserialization: ObjectInputStream.readObject() without validation",
    "recommendation": "Validate objects before deserialization or use safe serialization methods",
    "cwe": "CWE-502",
    "owasp": "A08:2021 – Software and Data Integrity Failures",
    "confidence": 0.7
  },
  {
    "id": "java-hardcoded-password",
    "type": "hardcoded-credentials",
    "severity": "high",
    "category": "secrets",
    "pattern": "getConnection\\(.*\\\".*password.*\\\".*\\)",
    "flags": "i",
    "message": "Hardcoded credentials in database connection",
    "recommendation": "Use environment variables or secure credential storage",
    "cwe": "CWE-798", 
    "owasp": "A07:2021 – Identification and Authentication Failures",
    "confidence": 0.8
  },
  {
    "id": "java-weak-crypto",
    "type": "weak-cryptography",
    "severity": "medium",
    "category": "crypto",
    "pattern": "MessageDigest\\.getInstance\\(\\\"MD5\\\"\\)",
    "flags": "i",
    "message": "Weak cryptographic hash: MD5 is cryptographically broken",
    "recommendation": "Use SHA-256 or stronger hashing algorithms",
    "cwe": "CWE-327",
    "owasp": "A02:2021 – Cryptographic Failures", 
    "confidence": 0.9
  },
  {
    "id": "java-path-traversal",
    "type": "path-traversal",
    "severity": "high",
    "category": "injection",
    "pattern": "new\\s+File\\(.*\\+.*\\)",
    "flags": "i",
    "message": "Path traversal vulnerability: Unsanitized file path construction",
    "recommendation": "Validate and sanitize file paths, use Path.normalize()",
    "cwe": "CWE-22",
    "owasp": "A01:2021 – Broken Access Control",
    "confidence": 0.6
  },
  {
    "id": "java-xxe",
    "type": "xxe-injection",
    "severity": "high", 
    "category": "injection",
    "pattern": "DocumentBuilderFactory\\.newInstance\\(\\)",
    "flags": "i",
    "message": "Potential XXE vulnerability: XML parsing without security features disabled",
    "recommendation": "Disable external entity processing in XML parsers",
    "cwe": "CWE-611",
    "owasp": "A05:2021 – Security Misconfiguration",
    "confidence": 0.5
  },
  {
    "id": "java-reflection-injection",
    "type": "code-injection",
    "severity": "high",
    "category": "injection",
    "pattern": "Class\\.forName\\(.*\\+.*\\)",
    "flags": "i",
    "message": "Code injection via reflection: Dynamic class loading with user input",
    "recommendation": "Avoid dynamic class loading with user input or use allowlists",
    "cwe": "CWE-94",
    "owasp": "A03:2021 – Injection",
    "confidence": 0.7
  }
]