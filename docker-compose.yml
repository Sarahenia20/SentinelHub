version: '3.8'

services:
  # Redis Database
  redis:
    image: redis:7-alpine
    container_name: sentinelhub-redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_ARGS=--requirepass ${REDIS_PASSWORD:-sentinelhub123}
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-sentinelhub123}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - sentinelhub-network

  # SentinelHub API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: sentinelhub-api
    ports:
      - "3001:3001"
      - "9001:9001"  # WebSocket server
    environment:
      - NODE_ENV=development
      - PORT=3001
      - WS_PORT=9001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-sentinelhub123}
      - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY}
      - SHODAN_API_KEY=${SHODAN_API_KEY}
      - ABUSEIPDB_API_KEY=${ABUSEIPDB_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker integration
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - sentinelhub-network

  # Next.js Frontend (Client)
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: sentinelhub-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - NEXT_PUBLIC_API_URL=http://localhost:3001/api
      - NEXT_PUBLIC_WS_URL=ws://localhost:9001
    volumes:
      - ./client:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - api-gateway
    restart: unless-stopped
    networks:
      - sentinelhub-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: sentinelhub-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./services/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - sentinelhub-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: sentinelhub-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-sentinelhub123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./services/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./services/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - sentinelhub-network

  # SonarQube for code quality analysis
  sonarqube:
    image: sonarqube:community
    container_name: sentinelhub-sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - sentinelhub-network

  # PostgreSQL for SonarQube
  postgres:
    image: postgres:13
    container_name: sentinelhub-postgres
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - sentinelhub-network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgres_data:

networks:
  sentinelhub-network:
    driver: bridge